#!/usr/bin/env node

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

const path = require('path');

// ./ is our current working directory
process.chdir(path.dirname(__dirname));

require('../lib/logging-config.js');

const
express = require('express'),
config = require('../lib/config.js'),
certify = require('../lib/cert-compute.js'),
keys = require('../lib/keys');

var server = express.createServer(
  express.bodyParser()
);

server.post('/cert_key', function(req, res) {
  // validate optional 'duration' parameter
  var duration = req.body.duration || config.get('certificate_validity_ms');
  duration = parseInt(duration, 10); // accept numerical strings
  if (isNaN(duration)) {
    return res.json({
      success: false,
      reason: 'duration argument must be a number when present'
    }, 400);
  }

  // validate required 'pubkey' parameter
  if (typeof req.body.pubkey != 'string') {
    return res.json({
      success: false,
      reason: 'pubkey argument is required and must be a string'
    }, 400);
  }

  // validate required 'email' parameter
  if (typeof req.body.email != 'string') {
    return res.json({
      success: false,
      reason: 'email argument is required and must be a string'
    }, 400);
  }

  certify({
    email: req.body.email,
    pubkey: req.body.pubkey,
    duration: req.body.duration,
    hostname: config.get('issuer_hostname')
  }, function(err, certificate) {
    var ro = { };
    if (err) {
      ro.success = false;
      ro.reason = err.toString();
    } else {
      ro.success = true;
      ro.certificate = certificate;
    }

    res.json(ro, ro.success ? 200 : 400);
  });
});

// Ops
server.get('/__heartbeat__', function (req, res) { res.send('ok certifier')});
server.get('/public-key', function (req, res) {
  keys.pubkey(function (err, publicKey) {
    res.contentType('application/json');
    res.send(publicKey.serialize());
  });
});

// handle starting from the command line or the test harness
if (path.basename(process.argv[1]) === path.basename(__filename)) {
  server.listen(config.get('port'), config.get('ip'), function(err) {
    console.log('Certifier started, listening at', config.get('ip'), 'on', server.address().port);
  });
} else {
  module.exports = function(cb) {
    server.listen(config.get('port'), function(err) {
      cb(err, server.address().port);
    });
  }
}
